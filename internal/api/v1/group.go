//generated by lazy
//author: seanlan

package v1

import (
	"TelegramBot/internal/e"
	"TelegramBot/internal/model"
	"TelegramBot/internal/service"
	"TelegramBot/pkg/xlhttp"
	"github.com/gin-gonic/gin"
)

func GetGroupList(c *gin.Context) {
	var (
		err    error
		userID int64
	)
	r := xlhttp.Build(c)
	userID, err = r.GetJWTUID()
	if userID == 0 || err != nil {
		r.JsonReturn(e.ErrorToken)
		return
	}
	var req model.GetGroupListReq
	err = r.RequestParser(&req)
	if err != nil {
		return
	}
	req.UserID = userID
	req.ClientIP = c.ClientIP()
	resp, err := service.GetGroupList(c, req)
	r.JsonReturn(err, resp)
	return
}
func SaveGroup(c *gin.Context) {
	var (
		err    error
		userID int64
	)
	r := xlhttp.Build(c)
	userID, err = r.GetJWTUID()
	if userID == 0 || err != nil {
		r.JsonReturn(e.ErrorToken)
		return
	}
	var req model.SaveGroupReq
	err = r.RequestParser(&req)
	if err != nil {
		return
	}
	req.UserID = userID
	req.ClientIP = c.ClientIP()
	resp, err := service.SaveGroup(c, req)
	r.JsonReturn(err, resp)
	return
}
func DeleteGroup(c *gin.Context) {
	var (
		err    error
		userID int64
	)
	r := xlhttp.Build(c)
	userID, err = r.GetJWTUID()
	if userID == 0 || err != nil {
		r.JsonReturn(e.ErrorToken)
		return
	}
	var req model.DeleteGroupReq
	err = r.RequestParser(&req)
	if err != nil {
		return
	}
	req.UserID = userID
	req.ClientIP = c.ClientIP()
	resp, err := service.DeleteGroup(c, req)
	r.JsonReturn(err, resp)
	return
}
