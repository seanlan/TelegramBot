//generated by lazy
//author: seanlan

package service

import (
	"TelegramBot/internal/dao"
	"TelegramBot/internal/dao/sqlmodel"
	"TelegramBot/internal/model"
	"context"
	"gorm.io/gorm/clause"
)

func GetGroupList(ctx context.Context, req model.GetGroupListReq) (resp model.GetGroupListResp, err error) {
	var (
		groupQ = sqlmodel.BotGroupsColumns
		params = make([]clause.Expression, 0)
	)
	if req.BotID != 0 {
		params = append(params, groupQ.BotID.Eq(req.BotID))
	}
	resp.Total, err = dao.CountBotGroups(ctx, dao.And(params...))
	if err != nil {
		return
	}
	err = dao.FetchAllBotGroups(ctx, &resp.List, dao.And(params...), req.Page, req.Size, groupQ.ID.Desc())
	return
}

func SaveGroup(ctx context.Context, req model.SaveGroupReq) (resp model.SaveGroupResp, err error) {
	var groupQ = sqlmodel.BotGroupsColumns
	group := &sqlmodel.BotGroups{
		ID:          req.ID,
		BotID:       req.BotID,
		GroupTgID:   req.GroupTgID,
		GroupTgName: req.GroupTgName,
	}
	_, err = dao.UpsertBotGroups(ctx, group,
		dao.M{
			groupQ.BotID.FieldName:       req.BotID,
			groupQ.GroupTgID.FieldName:   req.GroupTgID,
			groupQ.GroupTgName.FieldName: req.GroupTgName,
		}, groupQ.ID.FieldName)
	return
}

func DeleteGroup(ctx context.Context, req model.DeleteGroupReq) (resp model.DeleteGroupResp, err error) {
	_, err = dao.DeleteBotGroups(ctx, sqlmodel.BotGroupsColumns.ID.Eq(req.ID))
	return
}
